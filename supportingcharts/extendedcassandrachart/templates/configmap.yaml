kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "kubernetes.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "kubernetes.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  envVars.sh: |-
    #!/bin/bash

    export CLUSTER_DOMAIN=$(hostname -d | awk -F"." '{print $(NF-1),".",$NF}' | sed 's/ //g')
    export CASSANDRA_SEEDS={{ template "kubernetes.name" . }}-0.{{ template "kubernetes.name" . }}.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN,{{ template "kubernetes.name" . }}-1.{{ template "kubernetes.name" . }}.{{ .Release.Namespace }}.svc.$CLUSTER_DOMAIN
  jvm_options.sh: |-
    #!/bin/bash

    # Todo: avoid this and add manage it with run.sh
    echo "JVM_OPTS=\"\$JVM_OPTS {{ .Values.cassandraJvmOptions }}\"" >> /etc/cassandra/cassandra-env.sh
  run_override.sh: |-
    #!/bin/bash

    source /usr/local/apache-cassandra/scripts/envVars.sh
    /usr/local/apache-cassandra/scripts/jvm_options.sh

    /run.sh
  postStart.sh: |-
    #!/bin/bash
    source /usr/local/apache-cassandra/scripts/envVars.sh

    until /ready-probe.sh ; do
      echo "Waiting node to be ready"
      sleep 1
    done

    {{- if .Values.cassandraReaper.enableReaper }}
    # Wait until we have all replicas to create Cassandra Reaper keyspace
    if [ "$(hostname)" == 'cassandra-{{ sub .Values.cassandraReplicaCount 1}}' ] ; then
      cqlsh -e "CREATE KEYSPACE IF NOT EXISTS reaper_db WITH replication = {'class': 'NetworkTopologyStrategy', '{{ .Values.cassandraDC }}': {{ .Values.cassandraReplicaCount }}}; DESCRIBE keyspaces;" > /var/log/reaperdb.log
    fi
    {{- end }}

    {{- if .Values.cassandraReaperRegister.enableReaperRegister }}
    # Register cluster into Cassandra Reaper
    # Do not target current instance to avoid unready instance status (and registration failure)
    if [ "$(hostname)" == 'cassandra-0' ] ; then
      seedHost=$(hostname -A | sed 's/^cassandra-0/cassandra-1/')
    else
      seedHost=$(hostname -A | sed -r 's/^cassandra-\w+(\..+)/cassandra-0\1/')
    fi

    # Check if cluster needs to be registred or simply updated
    counter=0
    if [ $(curl -s "http://{{ .Values.cassandraReaperRegister.reaperServerServiceName }}/cluster" | grep -c $CASSANDRA_CLUSTER_NAME) == 0 ] ; then
      while [ $(curl -s -I -X POST "http://{{ .Values.cassandraReaperRegister.reaperServerServiceName }}/cluster?seedHost=$seedHost" | grep -c "^HTTP/1.1 201 Created") != 1 ] ; do
        if [ $counter == 5 ] ; then
          break
        fi
        counter=$((counter+1))
        sleep 5
      done
    else
      while [ $(curl -s -I -X PUT "http://{{ .Values.cassandraReaperRegister.reaperServerServiceName }}/cluster/${CASSANDRA_CLUSTER_NAME}?seedHost=$seedHost" | egrep -c "^HTTP/1.1 (200|304)") != 1 ] ; do
        if [ $counter == 5 ] ; then
          break
        fi
        counter=$((counter+1))
        sleep 5
      done
    fi
    {{- end }}
    exit 0
  preStop.sh: |-
    #!/bin/sh

    run_nodetool() {
      echo "Running: nodetool $1"
      /usr/local/apache-cassandra/bin/nodetool $1
      sleep 5
    }

    while [ $(/usr/local/apache-cassandra/bin/nodetool status | awk "/$CASSANDRA_RACK/{ print \$1,\$2 }" | grep -v $POD_IP | awk '{ print $1 }' | grep -v UN) -eq 0 ] ; do
      echo "Waiting all nodes to recover a correct status before draining this node"
      sleep 5
      pidof java || exit 1
    done

    run_nodetool disablethrift
    run_nodetool disablebinary
    run_nodetool disablegossip
    run_nodetool flush
    run_nodetool drain
    sleep 10
    run_nodetool stop
    run_nodetool stopdaemon

    exit 0
  snapshot2s3.sh: |-
    #!/bin/bash

    function alert_failure() {
      content=$1
      file="${CASSANDRA_CLUSTER_NAME}_$(hostname)"
      resource="/$AWS_BUCKET/failures/${file}"
      contentType="text/plain"
      dateValue=`date -R`
      stringToSign="PUT\n\n${contentType}\n${dateValue}\n${resource}"
      signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${AWS_SECRET_ACCESS_KEY} -binary | base64`

      echo -e ${content} >> $file
      curl -X PUT -T "${file}" \
        -H "Host: ${AWS_BUCKET}.s3.amazonaws.com" \
        -H "Date: ${dateValue}" \
        -H "Content-Type: ${contentType}" \
        -H "Authorization: AWS ${AWS_ACCESS_KEY_ID}:${signature}" \
        https://${AWS_BUCKET}.s3-eu-west-1.amazonaws.com/failures/${file}
      rm -f $file
    }

    function clean() {
      echo "[+] Cleaning"
      /usr/local/apache-cassandra/bin/nodetool clearsnapshot
      rm -Rf /snap /tmp/snapshot2s3.log
    }

    # Create lock or stop if already present
    function create_lock() {
      if [ -f /tmp/snapshot2s3.lock ] ; then
        echo "Backup or restore is already in progress for $CLUSTER_DOMAIN/$CASSANDRA_CLUSTER_NAME/$(hostname)"
        exit 0
      fi
    }

    function release_lock() {
      rm -Rf /tmp/snapshot2s3.lock
    }

    function backup() {

      create_lock
      clean

      export LC_ALL=C
      snap_name="snapshot_$(date +%Y-%m-%d_%H-%M-%S)"

      # Create snapshot
      echo "[+] Starting Snapshot"
      /usr/local/apache-cassandra/bin/nodetool snapshot -t $snap_name > /tmp/snapshot2s3.log 2>&1
      if [ $? != 0 ] ; then
        echo "Error during snapshot, please check manually, cleaning before exit"
        alert_failure "Error during snaptshot:\n$(cat /tmp/snapshot2s3.log)"
        clean
        release_lock
        exit 1
      fi
      cat /tmp/snapshot2s3.log

      # Create temporary folder
      find /var/lib/cassandra/data -name $snap_name -exec mkdir -p /snap/{} \;

      # Make snapshot symlinks
      cd /snap
      for i in $(find . -name $snap_name | sed 's/^.\///') ; do
        rmdir /snap/$i
        ln -s /$i /snap/$i
      done

      # Dump schemas
      mkdir -p /snap/var/lib/cassandra/schemas
      for schema in $(cqlsh -e "select keyspace_name from system_schema.keyspaces;" | egrep "^\s+" | awk '{ print $1 }' | grep -v keyspace_name) ; do
        cqlsh -e "describe keyspace ${schema}" > /snap/var/lib/cassandra/schemas/${schema}.cql
        if [ $? != 0 ] ; then
          echo "Error while dumping schema ${schema}"
          alert_failure "Error while dumping ${schema} schema"
          clean
          release_lock
          exit 1
        fi
      done

      # Transfer with duplicity
      echo "[+] Running duplicity to transfer to AWS"
      duplicity {{ default "--archive-dir /var/lib/cassandra/.duplicity --allow-source-mismatch --s3-european-buckets --s3-use-new-style --copy-links --num-retries 3 --s3-use-multiprocessing --s3-multipart-chunk-size 100 --volsize 1024" .Values.cassandraBackup.duplicityOptions }} full . {{ .Values.cassandraBackup.awsDestinationPath }} > /tmp/snapshot2s3.log 2>&1
      if [ $? != 0 ] ; then
        echo "Error while backuping $CLUSTER_DOMAIN/$CASSANDRA_CLUSTER_NAME/$(hostname)"
        alert_failure "Error with duplicity\n$(cat /tmp/snapshot2s3.log)"
      fi
      cat /tmp/snapshot2s3.log

      # Clean snapshot
      clean
      release_lock
    }

    function restore() {
      create_lock

      echo "[+] Running duplicity to restore from AWS"
      duplicity {{ default "--archive-dir /var/lib/cassandra/.duplicity --allow-source-mismatch --s3-european-buckets --s3-use-new-style --copy-links --num-retries 3 --s3-use-multiprocessing --s3-multipart-chunk-size 100 --volsize 1024" .Values.cassandraBackup.duplicityOptions }} --time $RESTORE_TIME {{ .Values.cassandraBackup.awsDestinationPath }} {{ .Values.cassandraBackup.restoreFolder }} > /tmp/snapshot2s3.log 2>&1
      if [ $? != 0 ] ; then
        echo "Error while restoring $CLUSTER_DOMAIN/$CASSANDRA_CLUSTER_NAME/$(hostname)"
        alert_failure "Error with duplicity\n$(cat /tmp/snapshot2s3.log)"
      fi
      cat /tmp/snapshot2s3.log

      # Clean snapshot
      clean
      release_lock
    }

    function list() {
      duplicity {{ default "--archive-dir /var/lib/cassandra/.duplicity --allow-source-mismatch --s3-european-buckets --s3-use-new-style --copy-links --num-retries 3 --s3-use-multiprocessing --s3-multipart-chunk-size 100 --volsize 1024" .Values.cassandraBackup.duplicityOptions }} collection-status {{ .Values.cassandraBackup.awsDestinationPath }}
    }

    function help() {
      echo "Usage: $0 [backup|restore|list] AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_PASSPHRASE AWS_BUCKET [RESTORE_TIME]"
      exit 1
    }

    # Check number of args
    test "$#" -lt 5 && help

    source /usr/local/apache-cassandra/scripts/envVars.sh
    export AWS_ACCESS_KEY_ID=$2
    export AWS_SECRET_ACCESS_KEY=$3
    export PASSPHRASE=$4
    export AWS_BUCKET=$5
    export RESTORE_TIME=$6

    if [ $1 == "backup" ] ; then
      backup
    elif [ $1 == "restore" ] ; then
      test "$#" -ne 6 && help
      restore
    elif [ $1 == "list" ] ; then
      list
    else
      echo "Don't know what to do, please look help at ./$0"
    fi
  cassandra-restore.sh: |-
    #!/bin/bash

    function help() {
      echo "Usage: $0 <restore_data_folder> <keyspace> [<table>]"
      echo '* restore_data_folder: the data folder restored from snapshot2s3.sh script'
      echo '* keyspace: the keyspace to restore'
      echo '* table: (optional field) the table name to restore (without uuid). If not set, all tables from a keyspace will be restored'
      exit 1
    }

    function restore_table() {
      ks=$1
      tb=$2
      echo -e "\n[+] Restoring ${ks}/${tb}"
      /usr/local/apache-cassandra/bin/sstableloader -d $(hostname -A) ${ks}/${tb}
    }

    # Check number of args
    test "$1" == 'help' && help
    test "$#" -gt 1 || help

    source /usr/local/apache-cassandra/scripts/envVars.sh
    RESTORE_DATA_FOLDER=$1
    KEYSPACE=$2
    TABLE=$3

    # Ensure $RESTORE_DATA_FOLDER exist
    if [ ! -d $RESTORE_DATA_FOLDER ] ; then
      echo "$RESTORE_DATA_FOLDER doesn't exist, please check"
      exit 1
    fi
    cd $RESTORE_DATA_FOLDER

    # Ensure $KEYSPACE is present
    if [ ! -d $KEYSPACE ] ; then
      echo "$KEYSPACE is not found in $RESTORE_DATA_FOLDER folder, please ensure you've specified the data folder of the restore folder"
      exit 1
    fi

    # Restore schema ?
    echo 'Do you want to restore schema as well (y/n) ? (required for empty cassandra)'
    read restore_schema
    if [ "$restore_schema" != 'y' ] ; then
      echo 'You decided to not restore schema'
    else
      echo 'You decided to restore schema'
    fi

    echo -e "\n[+]You're going to restore $KEYSPACE keyspace"
    echo "Hit enter key when you're ready to proceed"
    read

    echo "[+] Flushing data to disk"
    /usr/local/apache-cassandra/bin/nodetool flush

    # Restore schema
    if [ "$restore_schema" == 'y' ] ; then
      if [ -f ../schemas/${KEYSPACE}.cql ] ; then
        echo "[+] Restoring schema ${KEYSPACE}"
        cqlsh < ../schemas/${KEYSPACE}.cql
      else
        echo "[+] SCHEMA ${KEYSPACE} MISSING !!! CAN'T RESTORE"
      fi
    fi

    # Prepare snapshot to make it usable with sstableloader
    for current_table in $(ls $KEYSPACE) ; do
      table_name_path="$(find ./${KEYSPACE}/$current_table -name "snapshot_*")"
      if [ "$(echo $table_name_path)" != "" ] ; then
        echo "[+] Preparing ${KEYSPACE}/${current_table}"
        table_name=$(echo $table_name_path | awk -F'/' '{ print $3 }' | sed -r 's/(\w+)-.*/\1/')
        table_name_uuid=$(echo $table_name_path | sed -r 's/(.+)\/snapshots\/.+/\1/')
        mv -v $table_name_path ${KEYSPACE}/$table_name
        rm -Rf $table_name_uuid
      fi
    done

    # Restore all tables or the desired one
    if [ "$TABLE" == '' ] ; then
      # Restore
      for table_name in $(ls $KEYSPACE) ; do
          restore_table $KEYSPACE $table_name
      done
    else
      restore_table $KEYSPACE $TABLE
    fi

    echo "[+] Restore finished"
  exporter_run_override.sh: |-
    #!/bin/bash
    cp -f /usr/local/apache-cassandra/scripts/exporter_config.yml /etc/cassandra_exporter/config.yml
    /run.sh
  exporter_config.yml: |-
    hostPort: localhost:7199
    ssl: False
    user:
    password:
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    whitelistObjectNames: ["org.apache.cassandra.metrics:*"]
    blacklistObjectNames: ["org.apache.cassandra.metrics:type=ColumnFamily,*"]
    rules:
      - pattern: org.apache.cassandra.metrics<type=(Connection|Streaming), scope=(\S*), name=(\S*)><>(Count|Value)
        name: cassandra_$1_$3
        labels:
          address: "$2"
      - pattern: org.apache.cassandra.metrics<type=(ColumnFamily), name=(RangeLatency)><>(Mean)
        name: cassandra_$1_$2_$3
      - pattern: org.apache.cassandra.net<type=(FailureDetector)><>(DownEndpointCount)
        name: cassandra_$1_$2
      - pattern: org.apache.cassandra.metrics<type=(Keyspace), keyspace=(\S*), name=(\S*)><>(Count|Mean|95thPercentile)
        name: cassandra_$1_$3_$4
        labels:
          "$1": "$2"
      - pattern: org.apache.cassandra.metrics<type=(Table), keyspace=(\S*), scope=(\S*), name=(\S*)><>(Count|Mean|95thPercentile)
        name: cassandra_$1_$4_$5
        labels:
          "keyspace": "$2"
          "table": "$3"
      - pattern: org.apache.cassandra.metrics<type=(ClientRequest), scope=(\S*), name=(\S*)><>(Count|Mean|95thPercentile)
        name: cassandra_$1_$3_$4
        labels:
          "type": "$2"
      - pattern: org.apache.cassandra.metrics<type=(\S*)(?:, ((?!scope)\S*)=(\S*))?(?:, scope=(\S*))?, name=(\S*)><>(Count|Value)
        name: cassandra_$1_$5
        labels:
          "$1": "$4"
          "$2": "$3"